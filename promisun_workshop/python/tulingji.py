# 本关任务：实现一个图灵机，该图灵机能识别两种模式“V=C;”和 “V=C+C;”并能去除空格，在输入不符合这两种模式时输出false。

# 相关知识
# 为了完成本关任务，你需要掌握：1.图灵机的工作原理和控制规则。2.python中列表，元组，字典的使用。

# 图灵机

#     图灵机的字母表{V，C，=，+，空格, ; }；null表示什么也不写回。
#     圆圈中的S1到S7代表图灵机可能处于的7个状态。S1起始状态；S7终止状态。
#     每条线上的三元组代表图灵机在当前状态中遇到特定输入时进行的操作，即（当前读取字母，写回字母，左移或者右移），线的箭头指向为图灵机要进入的下一个状态。
#     例如图灵机处于S1状态时读写头读到纸带上字母为空格时，什么也不写回（实际实现的代码中实际将读取到的字符修改为空字符‘’），读写头右移指向下一个字母，下一个状态仍然是S1状态。读写头读到纸带上字母为V时,写回字母V读写头右移,下一个状态为S2状态。
#     当图灵机读到的字母不符合图中横线上的状态转移规则时，模式匹配失败，说明输入不符合图灵机要识别的“V=C;”和 “V=C+C;”两种模式。例如图灵机在S2状态时读到字母‘+’时，因不符合S2状态的合法的输入字母‘=’或者空格，因此模式匹配失败。
#     当图灵机运行到最终状态S7时，表示输入的模式匹配成功，此时输出纸带上的内容就是该输入所匹配的模式。

# 列表
# 类似C语言中数组，列表索引从0开始，列表的数据项不需要具有相同的类型，可以对列表的数据项进行修改或更新。
# 如list1 = ['physics', 'chemistry', 1997, 2000]
# 访问list[0]得到字符串'physics'。

# 元组
# Python的元组与列表类似，不同之处在于元组的元素不能修改。元组使用小括号，列表使用方括号。元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。
# 如tup1 = ('physics', 'chemistry', 1997, 2000)
# 访问tup1[1]得到'chemistry'。

# 字典
# 字典是另一种可变容器模型，且可存储任意类型对象。
# 字典的每个键值 key=>value 对用冒号 : 分割，每个键值对之间用逗号 , 分割，整个字典包括在花括号 {} 中 ,格式如下所示：
# d = {key1 : value1, key2 : value2 }
# 值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。
# 一个简单的字典实例：
# dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}
# 访问dict['Name']得到字符串'Zara'。

# 编程要求
# 根据提示，在右侧编辑器补充代码，输出图灵机运行过程每一步所使用的规则，匹配成功时输出所匹配的模式，匹配失败时在遇到不合法的输入字母后输出false。

# 测试说明
# 平台会对你编写的代码进行测试：

# 测试输入：sum =1 +2;
# 预期输出：
# 请输入纸带上内容：
# sum =1 +2;
# Input on Tape:
# sum =1 +2;
# ('S1', 'V', 'V', 'R', 'S2')
# ('S2', ' ', '', 'R', 'S2')
# ('S2', '=', '=', 'R', 'S3')
# ('S3', 'C', 'C', 'R', 'S4')
# ('S4', ' ', '', 'R', 'S4')
# ('S4', '+', '+', 'R', 'S5')
# ('S5', 'C', 'C', 'R', 'S6')
# ('S6', ';', '', 'N', 'S7')
# Result of Turing machine calculation:
# V=C+C

# 测试输入：a= 5 - 8;
# 预期输出：
# 请输入纸带上内容：
# a= 5 - 8;
# Input on Tape:
# a= 5 - 8;
# ('S1', 'V', 'V', 'R', 'S2')
# ('S2', '=', '=', 'R', 'S3')
# ('S3', ' ', '', 'R', 'S3')
# ('S3', 'C', 'C', 'R', 'S4')
# ('S4', ' ', '', 'R', 'S4')
# ('S4', '-'): false

# 开始你的任务吧，祝你成功！


import re
if __name__=="__main__":
    initial_state = "S1" #图灵机初始状态
    final_states = "S7"
    #请根据图灵机的状态转换图把下面状态转移表的字典填写完整
    #图灵机状态转移表如下
    transition_function = {("S1", " "): ("", "R", "S1"),
                           ("S1", "V"): ("V","R","S2") ,
                           ("S2", " "): ("", "R", "S2"),
                           ("S2", "="): ("=", "R", "S3"),
                           ("S3", " "): ("", "R", "S3"),
                           ("S3", "C"): ("C", "R", "S4"),
                           ("S4", " "): ("", "R", "S4"),
                           ("S4", "+"): ("+", "R", "S5"),
                           ("S4", ";"):  ("","N","S7")               ,
                           ("S5", " "): ("", "R", "S5"),
                           ("S5", "C"): ("C", "R", "S6"),
                            ("S6"," "): ("", "R", "S6"),
                           ("S6", ";"): ("", "N", "S7")
                           }
    tape_alphabet = ["V", "C", " ", "=", "+", ";"] #图灵机字母表
    
    print("请输入纸带上内容：")
    s = input()
    print("Input on Tape:")
    print(s)
    s1 = re.sub(r'[_a-zA-Z]\w*', "V", s) #通过正则表达式匹配变量标识符并转换为字母'V'
    s2 = re.sub(r'0|[1-9]\d*', "C", s1)  #通过正则表达式匹配正整数并转换为字母'C'
    position = 0 #图灵机的当前读取位置
    current_state = initial_state #初始化图灵机当前状态
    tape = list(s2) #构建图灵机要识别的字母列表，内容如[' ', 'V', ' ', '=', 'C', ' ']
    flag = True #是否匹配特定模式的标记
    while current_state != final_states:
        char = tape[position] #图灵机当前读取到的字母
        x = (current_state, char)
        if x in transition_function: #查询图灵机状态转移表确定下一步操作
            y = transition_function[x]
            print(str(x+y)) 
            #请根据注释在此添加代码，勿改动其它代码
            #改变纸带上字母
            #-----------Begin----------
            tape[position]=y[0]
            #------------End-----------
            if y[1] == "R": #右移
                # 请在此添加代码，勿改动其它代码
                #-----------Begin----------
                position += 1
                #------------End-----------
            elif y[1] == "N": #左移
                # 请在此添加代码，勿改动其它代码
                #-----------Begin----------
                position -= 1
                #------------End-----------
            
            #请根据注释在此添加代码，勿改动其它代码
            #图灵机进入下一个状态
            #-----------Begin----------
            current_state=y[2]
            #------------End-----------          
            if position < 0 or position >= len(tape): #超出纸带范围
                print("最终状态不是S7: false")
                flag = False
                break;
        else: #当前状态与当前输入不在状态转移表中，模式匹配失败
            print(str(x) + ": false")
            flag = False
            break;
    if flag:
        print("Result of Turing machine calculation:")
        print(''.join(tape))