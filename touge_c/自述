这道迷宫题一开始看的时候感觉是懵的，
完全不知道怎么做，然后就想着定义几个函数先，
其中一个函数是找到路线并且打印or保存下来，然后其中定义一堆函数判断是否可以左移或者右移；
但是到了这一步以后就什么也不知道了，然后想到用递归，但是不知道由于知道有多种情况，而return只能单线程，
每个函数只能有一个return；有陷入迷茫，但是用了ai才发现，实际上我并不需要return只需要用多个if就可以了，
然后这个东西从宏观上就是一个树状图的展开，但实际上是有顺序的，
这也就是为什么一个map数组就可以存储所有的可能性并且保存在paths数组里面；
因为整个函数只能在到达终点或者走不通的时候才会return；而且每次return 都会把当前一次所在位置在map上删掉，
直到最后找到终点的时候记录。
    这意味着就是其实就是先走到头再回去在某个可以分岔的节点寻找新的可能，
所以实际上只需要一张地图即map来记录；







在这里遇到一些问题，很小，但是足够致命，
我习惯设置r和c分别表示行和列，而当前位置使用y表示行，
x表示列，在写函数和用函数时，我习惯于r写在前，x也写在前，
导致使用时行列搞混，而且在写函数的时候还很多粗心，搞混变量，
导致debug时间大大延长；
